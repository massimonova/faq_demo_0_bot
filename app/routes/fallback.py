from aiogram import Router, F
from aiogram.types import Message
from app.services import registry
from app.keyboards.common import categories_kb, category_items_kb, search_results_kb
from app.keyboards.reply import main_menu_kb
from app.keyboards.common import search_results_kb


router = Router(name="fallback_routes")

@router.message(F.text == "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(m: Message):
    cats = registry.store.categories
    await m.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=categories_kb(cats))

@router.message(F.text.lower().contains("–ø–æ–ø—É–ª—è—Ä"))
async def show_popular(m: Message):
    titles = registry.store.popular_titles()  # ['–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å...', ...]
    results = []
    for t in titles:
        key = registry.store.lookup_by_question(t)  # -> ('pay', 0) –∏ —Ç.–ø.
        if key:
            cat_id, idx = key
            results.append((cat_id, idx, t, 100))   # (cat_id, idx, q, score)

    if not results:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    await m.answer("–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ:", reply_markup=search_results_kb(results))

@router.message(F.text == "üîé –ü–æ–∏—Å–∫")
async def prompt_search(m: Message):
    await m.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu_kb())

@router.message(F.text == "‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_entry(m: Message):
    # –¥–µ—Ä–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–ª–ª–±–µ–∫ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–∞–∫ —Å—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
    await m.answer("–û–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –ø–µ—Ä–µ—à–ª—é –∞–¥–º–∏–Ω—É.", reply_markup=main_menu_kb())

@router.message(F.text & ~F.text.startswith("/"))
async def free_text_search(m: Message):
    q = m.text.strip()
    if len(q) < 2:
        await m.answer("–ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª–∏–Ω–Ω–µ–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=main_menu_kb())
        return
    hits = registry.searcher.search(q, limit=8, cutoff=55)
    if not hits:
        await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ.", reply_markup=main_menu_kb())
        return
    await m.answer("–ù–∞—à—ë–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã:", reply_markup=search_results_kb(hits))
