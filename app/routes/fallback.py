from aiogram import Router, F
from aiogram.types import Message

from ..services import registry
from ..keyboards.common import categories_kb, search_results_kb
from ..keyboards.reply import main_menu_kb

router = Router(name="fallback_routes")

def _not_ready():
    return (registry.store is None) or (registry.searcher is None)

@router.message(F.text == "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(m: Message):
    if _not_ready():
        await m.answer("–°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu_kb())
        return
    cats = registry.store.list_categories()
    await m.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=categories_kb(cats))

@router.message(F.text == "üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ")
async def show_popular(m: Message):
    if _not_ready():
        await m.answer("–°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu_kb())
        return
    results = []
    for t in registry.store.popular_titles():
        key = registry.store.lookup_by_question(t)
        if not key:
            continue
        cat_id, idx = key
        results.append((cat_id, int(idx), t, 100))
    if not results:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return
    await m.answer("–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ:", reply_markup=search_results_kb(results))

@router.message(F.text == "üîé –ü–æ–∏—Å–∫")
async def prompt_search(m: Message):
    await m.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu_kb())

@router.message(F.text == "‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_entry(m: Message):
    # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å callback, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é
    await m.answer("–ù–∞–∂–º–∏—Ç–µ ¬´–ú–µ–Ω—é ‚Üí –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª –∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=main_menu_kb())

@router.message(F.text & ~F.text.startswith("/"))
async def free_text_search(m: Message):
    if _not_ready():
        await m.answer("–°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu_kb())
        return
    q = (m.text or "").strip()
    if len(q) < 2:
        await m.answer("–ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª–∏–Ω–Ω–µ–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=main_menu_kb())
        return
    hits = registry.searcher.search(q, limit=8, cutoff=55)
    if not hits:
        await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ.", reply_markup=main_menu_kb())
        return
    await m.answer("–ù–∞—à—ë–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã:", reply_markup=search_results_kb(hits))

