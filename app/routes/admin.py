from aiogram import Router, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from ..config import settings
from ..services import analytics, registry

router = Router()
only_admin = F.from_user.id == settings.admin_id


class ReplyState(StatesGroup):
    waiting_text = State()


@router.message(only_admin, F.text == "/stats")
async def stats(m: Message):
    top = await analytics.top_questions(5)
    fails = await analytics.failed_queries(5)
    lines = ["–¢–æ–ø –≤–æ–ø—Ä–æ—Å–æ–≤:"]
    for cat_id, idx, views, y, n in top:
        lines.append(f"{cat_id}:{idx} ‚Äî views {views} üëç{y} üëé{n}")
    lines.append("\n–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏:")
    for q, cnt in fails:
        lines.append(f"{q} ‚Äî {cnt}")
    await m.answer("\n".join(lines) if len(lines) > 2 else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ")

@router.message(only_admin, F.text == "/export_csv")
async def export_csv(m: Message):
    paths = await analytics.export_csv()
    for p in paths:
        await m.answer_document(FSInputFile(p))


@router.message(only_admin, F.text == "/diag_yaml")
async def diag_yaml(m: Message):
    s = registry.store
    if not s:
        await m.answer("Store –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return

    total_cats = len(s.categories)
    total_items = sum(len(c.items) for c in s.categories)
    lines = [
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {total_cats}",
        f"–í–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ: {total_items}",
        "",
        "–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:"
    ]
    for c in s.categories:
        lines.append(f"- {c.id} ({c.title or '‚Äî'}): {len(c.items)}")

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ popular
    missing = [q for q in s.popular() if not s.lookup_by_question(q)]
    lines.append("")
    if missing:
        lines.append("popular: –µ—Å—Ç—å –ù–ï—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:")
        lines += [f"- {q}" for q in missing]
    else:
        lines.append("popular: –æ–∫")

    await m.answer("\n".join(lines))


@router.callback_query(only_admin, F.data.startswith("reply:"))
async def start_reply(c: CallbackQuery, state: FSMContext):
    _, uid = c.data.split(":")
    await state.set_state(ReplyState.waiting_text)
    await state.update_data(target_id=int(uid))
    await c.message.reply(f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await c.answer()

@router.message(only_admin, ReplyState.waiting_text)
async def send_reply(m: Message, state: FSMContext):
    data = await state.get_data()
    uid = data.get("target_id")
    if not uid:
        await m.answer("–ù–µ—Ç target_id.")
        await state.clear()
        return
    try:
        await m.bot.send_message(uid, f"–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n{m.text}")
        await m.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await m.answer(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
    await state.clear()